{"version":3,"sources":["components/displayTime.js","components/gerador.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayTime","props","playersToPlay","showModal","setDisplayModal","mapsToPlay","generateMix","console","log","timeOne","slice","timeTwo","title","centered","visible","onOk","onCancel","okText","cancelText","className","map","player","style","margin","mapa","i","Gerador","CheckboxGroup","Checkbox","Group","playersDefault","plainOptions","useState","checkedList","setCheckedList","indeterminate","setIndeterminate","checkAll","setCheckAll","players","setPlayers","displayModal","isMd3","setIsMd3","setMapsToPlay","setPlayersToPlay","updatePlayers","e","index","playersToUpdate","target","value","allPlayers","totalPlayers","length","indexArr","Math","floor","random","push","splice","avalliableMaps","newsMap","qtdMaps","prefix","defaultValue","onChange","checked","marginTop","marginBottom","options","list","checkedChildren","unCheckedChildren","defaultChecked","val","handleIsMd3","type","danger","icon","DoubleRightOutlined","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3e7724d.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Divider } from 'antd';\n\nexport default function DisplayTime(props) {\n    const { playersToPlay, showModal, setDisplayModal, mapsToPlay, generateMix } = props;\n    console.log(playersToPlay);\n\n    const timeOne = playersToPlay.slice(0, 5);\n    const timeTwo = playersToPlay.slice(5, 10);\n\n    return (\n        <Modal\n          title=\"Times gerados aleatoreamente. Sem choro!\"\n          centered\n          visible={showModal}\n          onOk={() => generateMix()}\n          onCancel={() => setDisplayModal(false)}\n          okText=\"Gerar Novamente\"\n          cancelText=\"Fechar\"\n        >\n            <div className=\"flex-center\">\n                <div className=\"md\">\n                    <h4>Time # BOT {timeOne[0]}</h4>\n                    {timeOne.map(player => (\n                        <>\n                        <span key={player}>{player}</span>\n                        <Divider style={{ margin: '5px 0' }}/>\n                        </>\n                    ))} \n                </div>\n                <div className=\"md\">\n                    <h4>Time # BOT {timeTwo[0]}</h4>\n                    {timeTwo.map(player => (\n                         <>\n                         <span key={player}>{player}</span>\n                         <Divider style={{ margin: '5px 0' }}/>\n                         </>\n                    ))} \n                </div>\n                <div className=\"full\">                    \n                    <div className=\"flex-center\">\n                    {mapsToPlay.map((mapa, i) => (\n                            <div key={mapa} className=\"map\">\n                                <span>Mapa #{i+1}</span>\n                                {mapa}\n                            </div>\n                    ))}                    \n                    </div>\n                </div>\n            </div>\n        </Modal>\n    );\n}","import React, { useState, useEffect} from 'react';\nimport { Checkbox, Divider, Switch, Button, Input } from 'antd';\nimport DisplayTime from './displayTime';\nimport { DoubleRightOutlined } from '@ant-design/icons';\n\nconst Gerador = () => {   \n    const CheckboxGroup = Checkbox.Group;\n    const playersDefault = ['Alfred', 'Biel', 'FM', 'DuMal', 'Alvin', 'Grilo', 'JELOL', 'Bigorn4', 'PiPwOw', 'Rozs'];\n    const plainOptions = ['Mirage', 'Inferno', 'Overpass', 'Train', 'Vertigo', 'Cache', 'Nuke', 'Dust 2'];\n    const defaultCheckedList = ['Mirage', 'Inferno', 'Overpass', 'Train'];\n\n    const [checkedList, setCheckedList] = useState(defaultCheckedList);\n    const [indeterminate, setIndeterminate] = useState(true);\n    const [checkAll, setCheckAll] = useState(false);    \n    const [players, setPlayers] = useState(playersDefault);\n    const [displayModal, setDisplayModal] = useState(false);\n    const [isMd3, setIsMd3] = useState(true);\n    const [mapsToPlay, setMapsToPlay] = useState([]);\n    const [playersToPlay, setPlayersToPlay] = useState(playersDefault);\n\n    const handleIsMd3 = (val) => {\n        setIsMd3(val);\n        if(checkedList.length < 3) {\n            setIndeterminate(false);\n            setCheckedList(val ? plainOptions : []);\n            setCheckAll(val);\n        } \n    }\n\n    const updatePlayers = (e, index) => {\n        const playersToUpdate = [...players];\n        playersToUpdate[index] = e.target.value;\n        setPlayers(playersToUpdate);\n    }\n\n    const onChangeMap = list => {\n        setCheckedList(list);\n        setIndeterminate(!!list.length && list.length < plainOptions.length);\n        setCheckAll(list.length === plainOptions.length);\n    };\n\n    const onCheckAllChangeMap = e => {\n        setCheckedList(e.target.checked ? plainOptions : []);\n        setIndeterminate(false);\n        setCheckAll(e.target.checked);\n    };\n\n    const generateMix = e => {\n        const allPlayers = [...players];\n        const totalPlayers = players.length;\n        const timeOne = [];\n        const timeTwo = [];\n        console.log(players);\n\n        for(let i = 1; i <= totalPlayers; i++) {\n            const indexArr = Math.floor((Math.random() * allPlayers.length) + 1 -1);\n\n            if(i <= 5) {\n                timeOne.push(allPlayers[indexArr]);\n            } else {\n                timeTwo.push(allPlayers[indexArr]);\n            }     \n\n            allPlayers.splice(indexArr, 1);\n        }\n        setPlayersToPlay([...timeOne, ...timeTwo])\n        setDisplayModal(true)\n\n        const avalliableMaps = [...checkedList];        \n        const newsMap = [];\n        let qtdMaps = 3;\n\n        if(!isMd3) {\n            qtdMaps = 1;\n        }\n\n        for(let i = 1; i <= qtdMaps; i++) {                \n            const index = Math.floor((Math.random() * avalliableMaps.length) + 1 -1);                \n            newsMap.push(avalliableMaps[index]);    \n            avalliableMaps.splice(index, 1);\n        }\n        \n        setMapsToPlay(newsMap);\n\n    }\n\n    return (\n        <>\n        <div className=\"App\">\n            <div className=\"box\">\n                <div className=\"full\">\n                <h2>Gerador de MIX dos BOT!</h2>\n                </div>\n                \n                <div className=\"md\">\n                <h4>Time 1</h4>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[0]} onChange={(e) => updatePlayers(e, 0)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[1]} onChange={(e) => updatePlayers(e, 1)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[2]} onChange={(e) => updatePlayers(e, 2)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[3]} onChange={(e) => updatePlayers(e, 3)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[4]} onChange={(e) => updatePlayers(e, 4)}/>\n                </div>\n                <div className=\"md\">\n                <h4>Time 2</h4>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[5]} onChange={(e) => updatePlayers(e, 5)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[6]} onChange={(e) => updatePlayers(e, 6)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[7]} onChange={(e) => updatePlayers(e, 7)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[8]} onChange={(e) => updatePlayers(e, 8)}/>\n                <Input prefix=\"BOT\" defaultValue={playersDefault[9]} onChange={(e) => updatePlayers(e, 9)}/>\n                </div>\n        \n                <div className=\"full options\">\n                    <h4>Selecione os Mapas</h4>\n                    <Checkbox indeterminate={indeterminate} onChange={onCheckAllChangeMap} checked={checkAll}>\n                        Selecionar todos\n                    </Checkbox>\n                    <Divider style={{ marginTop: '-25px', marginBottom: '35px' }} />\n                    <CheckboxGroup options={plainOptions} value={checkedList} onChange={onChangeMap} />\n                    <Divider />\n                    <Switch checkedChildren=\"MD3 ON\" unCheckedChildren=\"MD3 OFF\" defaultChecked onChange={(val) => handleIsMd3(val)}/>\n                </div>\n                \n                <div className=\"full\">\n                    <Button type=\"primary\" danger icon={<DoubleRightOutlined />} onClick={generateMix}>\n                        Let's go fellas!\n                    </Button>\n                </div>\n                <DisplayTime \n                    playersToPlay={playersToPlay} \n                    showModal={displayModal} \n                    setDisplayModal={setDisplayModal}\n                    isMd3={isMd3}\n                    mapsToPlay={mapsToPlay}\n                    generateMix={generateMix}\n                />\n            </div>\n        </div>\n        </>\n    );\n}\n\nexport default Gerador;","import React from 'react';\nimport Gerador from './components/gerador'\n\nfunction App() { \n\n  return (\n    <Gerador />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}